@page "/products"
@using MudBlazor
@inject ProductService ProductService
@inject ISnackbar Snackbar

<PageTitle>Products - Inventory System</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <div class="d-flex justify-space-between align-center mb-4">
            <MudText Typo="Typo.h3">ðŸ“¦ Products</MudText>
            <MudButton StartIcon="Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Filled"
                OnClick="@(() => OpenCreateDialog())">
                Add Product
            </MudButton>
        </div>
    </MudItem>

    <MudItem xs="12">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Product Inventory</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudTextField @bind-Value="searchString" Placeholder="Search products..."
                        Adornment="Adornment.Start" AdornmentIcon="Icons.Material.Filled.Search" IconSize="Size.Medium"
                        Class="mt-0" Immediate="true"
                        @oninput="@(async (e) => { searchString = e.Value?.ToString() ?? string.Empty; FilterProducts(); })" />
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                @if (loading)
                {
                    <div class="d-flex justify-center">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    </div>
                }
                else
                {
                    <MudTable Items="@filteredProducts" Hover="true" FixedHeader="true" Height="500px" Dense="false">
                        <HeaderContent>
                            <MudTh>Code</MudTh>
                            <MudTh>Name</MudTh>
                            <MudTh>Category</MudTh>
                            <MudTh>Quantity</MudTh>
                            <MudTh>Location</MudTh>
                            <MudTh>Registration Date</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Code">@context.Code</MudTd>
                            <MudTd DataLabel="Name">@context.Name</MudTd>
                            <MudTd DataLabel="Category">
                                <MudChip T="string" Size="Size.Small" Color="Color.Info">@context.Category</MudChip>
                            </MudTd>
                            <MudTd DataLabel="Quantity">
                                <MudChip T="string" Size="Size.Small"
                                    Color="@(context.Quantity > 10 ? Color.Success : context.Quantity > 5 ? Color.Warning : Color.Error)">
                                    @context.Quantity
                                </MudChip>
                            </MudTd>
                            <MudTd DataLabel="Location">@context.Location</MudTd>
                            <MudTd DataLabel="Registration Date">@context.RegistrationDate.ToString("MMM dd, yyyy")</MudTd>
                            <MudTd DataLabel="Actions">
                                <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small">
                                    <MudIconButton Icon="Icons.Material.Filled.Edit"
                                        OnClick="@(() => EditProduct(context))" />
                                    <MudIconButton Icon="Icons.Material.Filled.Delete" Color="Color.Error"
                                        OnClick="@(() => DeleteProduct(context))" />
                                </MudButtonGroup>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private List<ProductDto> products = new();
    private List<ProductDto> filteredProducts = new();
    private bool loading = true;
    private string searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        loading = true;
        var response = await ProductService.GetProductsAsync();

        if (response.Success && response.Data != null)
        {
            products = response.Data;
            filteredProducts = products;
        }
        else
        {
            Snackbar.Add(response.Message, Severity.Error);
        }

        loading = false;
        StateHasChanged();
    }

    private void FilterProducts()
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredProducts = products;
        }
        else
        {
            filteredProducts = products.Where(p =>
            p.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
            p.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
            p.Category.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            .ToList();
        }
        StateHasChanged();
    }
    private void OpenCreateDialog()
    {
        // TODO: Implement create dialog
        Snackbar.Add("Create product dialog will be implemented", Severity.Info);
    }

    private void EditProduct(ProductDto product)
    {
        // TODO: Implement edit dialog
        Snackbar.Add($"Edit {product.Name} dialog will be implemented", Severity.Info);
    }

    private void DeleteProduct(ProductDto product)
    {
        // TODO: Implement confirmation dialog
        Snackbar.Add($"Delete {product.Name} confirmation will be implemented", Severity.Warning);
    }
}
