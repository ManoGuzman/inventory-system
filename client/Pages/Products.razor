@page "/products"
@inject ProductService ProductService

<h1>Products</h1>

<div class="row mb-3">
    <div class="col">
        <button class="btn btn-primary" type="button" title="Add new product">
            Add Product
        </button>
    </div>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading products...</span>
        </div>
    </div>
}
else if (hasError)
{
    <div class="alert alert-danger" role="alert">
        <strong>Error:</strong> Unable to load products. Please try again later.
        <button class="btn btn-outline-danger btn-sm ms-2" @onclick="LoadProducts">
            Retry
        </button>
    </div>
}
else if (products == null || !products.Any())
{
    <div class="alert alert-info" role="alert">
        No products found. Click "Add Product" to create your first product.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Description</th>
                    <th scope="col">Price</th>
                    <th scope="col">Quantity</th>
                    <th scope="col">Category</th>
                    <th scope="col" style="width: 150px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td>
                            <strong>@product.Name</strong>
                        </td>
                        <td>
                            <span class="text-muted">@(string.IsNullOrEmpty(product.Description) ? "No description" : product.Description)</span>
                        </td>
                        <td>
                            <span class="fw-bold text-success">@product.Price.ToString("C")</span>
                        </td>
                        <td>
                            <span class="badge @(product.Quantity < 10 ? "bg-warning" : "bg-success")">
                                @product.Quantity
                            </span>
                        </td>
                        <td>
                            <span class="badge bg-secondary">@(string.IsNullOrEmpty(product.Category) ? "Uncategorized" : product.Category)</span>
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-outline-primary"
                                        @onclick="() => EditProduct(product)"
                                        title="Edit product">
                                    Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger"
                                        @onclick="() => DeleteProduct(product.Id)"
                                        title="Delete product">
                                    Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<ProductDto>? products;
    private bool isLoading = true;
    private bool hasError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            isLoading = true;
            hasError = false;
            StateHasChanged();

            products = await ProductService.GetProductsAsync();
        }
        catch (Exception)
        {
            hasError = true;
            products = new List<ProductDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task EditProduct(ProductDto product)
    {
        // TODO: Implement edit dialog
        await Task.CompletedTask;
    }

    private async Task DeleteProduct(int productId)
    {
        if (productId <= 0) return;

        // TODO: Add confirmation dialog
        var confirmed = true; // Replace with actual confirmation

        if (confirmed)
        {
            try
            {
                var success = await ProductService.DeleteProductAsync(productId);
                if (success)
                {
                    await LoadProducts();
                }
                else
                {
                    // TODO: Show error message to user
                }
            }
            catch (Exception)
            {
                // TODO: Show error message to user
            }
        }
    }
}
